<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Noonker</title>
    <link>https://noonker.github.io/posts/</link>
    <description>Recent content in Posts on Noonker</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 24 May 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://noonker.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Northsec CTF</title>
      <link>https://noonker.github.io/posts/2021-05-24-northsec-ctf/</link>
      <pubDate>Mon, 24 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://noonker.github.io/posts/2021-05-24-northsec-ctf/</guid>
      <description>I was lucky enough to get to compete in the Northsec CTF this weekend with the cold_root team. We ended up placing 4th out of 88 teams. There was a ton of awesome (and maddening) challenges and plenty of Malört consumed. The challenges showed up on a fantasy themed forum:
Scammed Again   The first thing I did was go to the web page to find that it was a chat dialogue with an enchanter named….</description>
    </item>
    
    <item>
      <title>CrowdStrike Adversary Quest CTF</title>
      <link>https://noonker.github.io/posts/2021-02-01-crowdstrike-adversary-zone/</link>
      <pubDate>Mon, 01 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://noonker.github.io/posts/2021-02-01-crowdstrike-adversary-zone/</guid>
      <description>Overview  I recently took part in the Adversary Quest CTF. I utimately got stopped at 5/12 challenges. Thanks to CrowdStrike for an awesome CTF and I look forward to completing it next year. Below are writeups for some of the challenges I was able to complete.
 I&amp;#39;m excluding The Proclamation from a writeup as this was my solution- this was a very cool challenge so I&amp;#39;m going to refer you to @Vinopaljiri&amp;#39;s excellent writeup.</description>
    </item>
    
    <item>
      <title>Json To Org-Mode Table</title>
      <link>https://noonker.github.io/posts/2021-01-03-json-to-org-table/</link>
      <pubDate>Sun, 03 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://noonker.github.io/posts/2021-01-03-json-to-org-table/</guid>
      <description>As part of the Emacs minor mode I&amp;#39;m working on I&amp;#39;ve created a useful function to turn json into Org tables while maintaining the linkage of nested structures. The is cleverly named json-to-org-table.
Why?  Json is a great format for programming and parsing structures but a less good language for human consumption. I created this tool so I could interact with APIs and have a human readable format (and one that exports nicely too!</description>
    </item>
    
    <item>
      <title>Using Org-Mode to Manage Configs</title>
      <link>https://noonker.github.io/posts/2020-12-31-org-config-manager/</link>
      <pubDate>Thu, 31 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://noonker.github.io/posts/2020-12-31-org-config-manager/</guid>
      <description>I&amp;#39;ve just started to use Org-Mode as a way to manage my configs. Previously I&amp;#39;ve kept my configs in a git repo and just had a post-install script to put all the configs in the right place.
 For now, I&amp;#39;m testing using Org-Mode for this purpose and I think I like the results.
 I have a config.org file that is arranged something like this:
#+TITLE: Configs - Tangle a single block with =C-u C-c C-v t= - Tangle all blocks with =C-v C-c t= #+name: secret #+begin_src emacs-lisp:var name=&amp;#34;&amp;#34;, fld=&amp;#34;&amp;#34; (if (string-equal fld &amp;#34;password&amp;#34;) (password-store-get name) (password-store-get-field name fld)) #+end_src *tmux #+begin_src bash:noweb tangle :tangle ~/.</description>
    </item>
    
    <item>
      <title>Elfeed Rules!</title>
      <link>https://noonker.github.io/posts/2020-04-22-elfeed/</link>
      <pubDate>Wed, 22 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://noonker.github.io/posts/2020-04-22-elfeed/</guid>
      <description>I recently got the question- &amp;#34;What is the use case for elfeed?&amp;#34;. When I get a chance to talk about my favorite software I will NEVER pass up that opportunity.
 Elfeed is a RSS feed reader for Emacs that I use daily and it solves a lot of problems for me. To understand how this works let&amp;#39;s start by looking at a snippet of my feeds config. Elfeed feeds is just a list of lists where each feed is represented by (url tag1 tag2 tagN) .</description>
    </item>
    
    <item>
      <title>No More Lock-in</title>
      <link>https://noonker.github.io/posts/2019-12-28-nomorelockin/</link>
      <pubDate>Sat, 28 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://noonker.github.io/posts/2019-12-28-nomorelockin/</guid>
      <description>decoupling the address from the service   I’ve been using gmail since it was an invite only beta. My email address has accumulated so much garbage over the years and finding important emails has become almost as difficult as determining important calls.
 I recently switched to Protonmail due to privacy concerns with Google’s monopoly on data. I had hoped I could use this transition to slowly shift important emails to a new address.</description>
    </item>
    
    <item>
      <title>A Less Than Ideal Way To Do 2-factor</title>
      <link>https://noonker.github.io/posts/2018-10-15-duo-twofactor/</link>
      <pubDate>Mon, 15 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://noonker.github.io/posts/2018-10-15-duo-twofactor/</guid>
      <description>probably just shouldn&amp;#39;t use cell networks for 2-factor   I have concerns with how Duo does phone two-factor authentication and think we can all learn from the way Google does it.
 The issue:
  If a user has their password compromised it’s easy to convince them to authenticate a 2-factor request without doing anything that would set off a red flag. This is due to the specific way Duo does phone call authentication.</description>
    </item>
    
  </channel>
</rss>
