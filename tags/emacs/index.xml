<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>emacs on Noonker</title>
    <link>https://noonker.github.io/tags/emacs/</link>
    <description>Recent content in emacs on Noonker</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 20 Nov 2022 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://noonker.github.io/tags/emacs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Org Mode Insert Table Reference</title>
      <link>https://noonker.github.io/posts/2022-11-20-org-create-reference/</link>
      <pubDate>Sun, 20 Nov 2022 00:00:00 +0000</pubDate>
      <guid>https://noonker.github.io/posts/2022-11-20-org-create-reference/</guid>
      <description>Emacs Org-Mode tables are very powerful. The formula editor can execute elisp commands which makes for a really powerful spreadsheet editor (especially when combined with org-sbe). One big limitation I&amp;#39;ve faced is multi-line content.&#xA;To solve this I&amp;#39;ve created a simple function to wrap around results of some elisp block to always return the most useful data.&#xA;(org-table-create-and-insert-reference &amp;#34;hello&amp;#34;) -&amp;gt; &amp;#34;hello&amp;#34;&#xA;(org-table-create-and-insert-reference &amp;#34;&amp;#34;) -&amp;gt; &amp;#34;nil&amp;#34;&#xA;(org-table-create-and-insert-reference nil) -&amp;gt; &amp;#34;nil&amp;#34;</description>
    </item>
    <item>
      <title>Json To Org-Mode Table</title>
      <link>https://noonker.github.io/posts/2021-01-03-json-to-org-table/</link>
      <pubDate>Sun, 03 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://noonker.github.io/posts/2021-01-03-json-to-org-table/</guid>
      <description>As part of the Emacs minor mode I&amp;#39;m working on I&amp;#39;ve created a useful function to turn json into Org tables while maintaining the linkage of nested structures. The is cleverly named json-to-org-table.&#xA;Why? Json is a great format for programming and parsing structures but a less good language for human consumption. I created this tool so I could interact with APIs and have a human readable format (and one that exports nicely too!</description>
    </item>
    <item>
      <title>Using Org-Mode to Manage Configs</title>
      <link>https://noonker.github.io/posts/2020-12-31-org-config-manager/</link>
      <pubDate>Thu, 31 Dec 2020 00:00:00 +0000</pubDate>
      <guid>https://noonker.github.io/posts/2020-12-31-org-config-manager/</guid>
      <description>I&amp;#39;ve just started to use Org-Mode as a way to manage my configs. Previously I&amp;#39;ve kept my configs in a git repo and just had a post-install script to put all the configs in the right place.&#xA;For now, I&amp;#39;m testing using Org-Mode for this purpose and I think I like the results.&#xA;I have a config.org file that is arranged something like this:&#xA;#+TITLE: Configs - Tangle a single block with =C-u C-c C-v t= - Tangle all blocks with =C-v C-c t= #+name: secret #+begin_src emacs-lisp :var name=&amp;#34;&amp;#34;, fld=&amp;#34;&amp;#34; (if (string-equal fld &amp;#34;password&amp;#34;) (password-store-get name) (password-store-get-field name fld)) #+end_src * tmux #+begin_src bash :noweb tangle :tangle ~/.</description>
    </item>
    <item>
      <title>Elfeed Rules!</title>
      <link>https://noonker.github.io/posts/2020-04-22-elfeed/</link>
      <pubDate>Wed, 22 Apr 2020 00:00:00 +0000</pubDate>
      <guid>https://noonker.github.io/posts/2020-04-22-elfeed/</guid>
      <description>I recently got the question- &amp;#34;What is the use case for elfeed?&amp;#34;. When I get a chance to talk about my favorite software I will NEVER pass up that opportunity.&#xA;Elfeed is a RSS feed reader for Emacs that I use daily and it solves a lot of problems for me. To understand how this works let&amp;#39;s start by looking at a snippet of my feeds config. Elfeed feeds is just a list of lists where each feed is represented by (url tag1 tag2 tagN) .</description>
    </item>
  </channel>
</rss>
